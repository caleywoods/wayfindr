plugins {
	id 'fabric-loom' version '1.10-SNAPSHOT'
	id 'maven-publish'
	id "org.jetbrains.kotlin.jvm" version "2.1.10"
	id 'org.jetbrains.kotlin.plugin.serialization' version '2.1.10'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = "Wayfindr-${project.mod_version}-${project.minecraft_version}"
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

fabricApi {
	configureDataGeneration {
		client = true
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "net.minecraft:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"
	implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.0"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
	kotlinOptions {
		jvmTarget = 21
	}
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

// Versioned source sets: include sources from src/mc${minecraft_version}/ if present
def mcVersion = project.findProperty('minecraft_version') ?: project.property('minecraft_version')
def mcSrcDir = "src/mc${mcVersion}"

sourceSets {
    main {
        // Kotlin sources
        if (file("${mcSrcDir}/kotlin").exists()) {
            kotlin.srcDirs += ["${mcSrcDir}/kotlin"]
            
            // Exclude version-specific files from main source set when building for a specific version
            // This prevents duplicate class declarations
            kotlin.exclude "**/WayfindrModClient.kt"
            kotlin.exclude "**/WayfindrNavigationRenderer.kt"
        }
        // Java sources
        if (file("${mcSrcDir}/java").exists()) {
            java.srcDirs += ["${mcSrcDir}/java"]
        }
        // Resources
        if (file("${mcSrcDir}/resources").exists()) {
            resources.srcDirs += ["${mcSrcDir}/resources"]
        }
    }
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
	
	// Handle duplicate files
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Configure the sources jar task to handle duplicates
sourcesJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

// Semantic Versioning Tasks
import java.util.regex.Pattern
import java.util.regex.Matcher

task setversion {
    group = 'versioning'
    description = 'Updates the version in gradle.properties based on semantic versioning (default: minor version bump)'
    
    doLast {
        // Get the version type from command line args or default to 'minor'
        def versionType = 'minor'
        if (project.hasProperty('args')) {
            def args = project.getProperty('args').split('\\s+')
            if (args.length > 0 && (args[0] == 'major' || args[0] == 'minor' || args[0] == 'patch')) {
                versionType = args[0]
            }
        }
        
        // Read the gradle.properties file
        def propsFile = file('gradle.properties')
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        
        // Get the current version
        def currentVersion = props.getProperty('mod_version')
        println "Current version: ${currentVersion}"
        
        // Parse the version using regex
        def pattern = Pattern.compile("(\\d+)\\.(\\d+)\\.(\\d+)(.*)")
        def matcher = pattern.matcher(currentVersion)
        
        if (matcher.matches()) {
            def major = Integer.parseInt(matcher.group(1))
            def minor = Integer.parseInt(matcher.group(2))
            def patch = Integer.parseInt(matcher.group(3))
            def suffix = matcher.group(4) ?: ""
            
            // Update version based on type
            switch (versionType) {
                case 'major':
                    major++
                    minor = 0
                    patch = 0
                    break
                case 'minor':
                    minor++
                    patch = 0
                    break
                case 'patch':
                    patch++
                    break
            }
            
            // Create the new version string
            def newVersion = "${major}.${minor}.${patch}${suffix}"
            println "New version: ${newVersion}"
            
            // Update the properties
            props.setProperty('mod_version', newVersion)
            
            // Save the properties back to the file
            def writer = new FileWriter(propsFile)
            props.store(writer, null)
            writer.close()
            
            println "Version updated successfully to ${newVersion}"
        } else {
            throw new GradleException("Invalid version format: ${currentVersion}. Expected format: X.Y.Z")
        }
    }
}

// Helper task to show the current version
task showversion {
    group = 'versioning'
    description = 'Shows the current version from gradle.properties'
    
    doLast {
        def propsFile = file('gradle.properties')
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        def currentVersion = props.getProperty('mod_version')
        println "Current version: ${currentVersion}"
    }
}